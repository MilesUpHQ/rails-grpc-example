# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: product_service.proto

require 'google/protobuf'


descriptor_data = "\n\x15product_service.proto\x12\x03rpc\"G\n\x07Product\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x0c\n\x04name\x18\x02 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x03 \x01(\t\x12\r\n\x05price\x18\x04 \x01(\x02\"\x1e\n\x0fProductsRequest\x12\x0b\n\x03ids\x18\x01 \x03(\x05\"2\n\x10ProductsResponse\x12\x1e\n\x08products\x18\x01 \x03(\x0b\x32\x0c.rpc.Product2N\n\x0eProductService\x12<\n\x0bGetProducts\x12\x14.rpc.ProductsRequest\x1a\x15.rpc.ProductsResponse\"\x00\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Rpc
  Product = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("rpc.Product").msgclass
  ProductsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("rpc.ProductsRequest").msgclass
  ProductsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("rpc.ProductsResponse").msgclass
end
